using Godot;
using System;

public partial class goop_well : RigidBody3D
{
	private Random random = new Random();
	private AnimatedSprite3D animatedSprite;
	private CollisionShape3D collisionShape;

	public float health = 100;
	public float spawnOffset = 1f;

	private bool isProducing = false;
	private float timer = 0f;
	private float cooldownTime = .1f; 

	// Add the goops scenes to be generated by the well
	private PackedScene goopScene = GD.Load<PackedScene>("res://scenes/friends/goop_head.tscn");

	public override void _Ready()
	{
		animatedSprite = GetNode<AnimatedSprite3D>("goop_well_anim");
		collisionShape = GetNode<CollisionShape3D>("goop_well_collide");
		animatedSprite.Play("idle");
	}

	public override void _PhysicsProcess(double delta)
	{
		// Do nothing if its currently making a goop
		if (isProducing) return;
		// Othewise idle
		animatedSprite.Play("idle");
		timer -= (float)delta;
		if (timer <= 0)
		{
			int produceChance = random.Next(0, 10); 
			if (produceChance < 9) 
			{
				// Loads the sequence to produce a goop: playing the anim/spawning
				_ = StartProduction();
			}
			timer = cooldownTime;
		}
	}

	private async System.Threading.Tasks.Task StartProduction()
	{
		isProducing = true;
		animatedSprite.Play("produce");

		await ToSignal(animatedSprite, "animation_finished");

		SpawnGoop();
		isProducing = false;
	}

	private void SpawnGoop()
	{
		Node3D goop = (Node3D)goopScene.Instantiate();
		Vector3 offset = Vector3.Zero;
		offset.Z = 2.0f;
		offset.Y = -1.0f;
		offset.X = .3f;
		//goop.GlobalTransform = new Transform3D(goop.GlobalTransform.Basis, spawnPosition);
		GetParent().AddChild(goop); 
	}
}
